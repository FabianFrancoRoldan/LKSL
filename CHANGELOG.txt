Search for a unit name to find its corresponding Changelog.

LKSL.Common.Types.pas
---------------------
	15th December 2014:
		- Added TLKObject
	10th September 2014:
		- Changelog removed from unit
	3rd September 2014:
		- Prepared for Release

LKSL.Events.Base.pas
--------------------
	18th December 2014:
		- "TLKEventList" renamed to "TLKEventQueueStack" to make room for a NEW TLKEventList (more appropriate naming)
	16th December 2014:
		- Removed deprecated Arrays. ("LKSL_NO_LISTS" define no logner has any effect)
		- Removed TLKEventProcessMode (no longer required)
			- Also removed all properties and methods of type TLKEventProcessMode
		- Fixed bug in TLKEventRecorder which forgot to add the Processed Time when recording each Event
		- Removed TLKEventStack
		- TLKEventQueue becomes TLKEventProcessor, combining the Stack AND the Queue into a single Thread
	15th December 2014:
		- Fixed an off-by-one error in TLKEventListenerGroup.ProcessEvent
		- Added RTTI Suppression (define LKSL_NO_RTTI in your project to disable RTTI for LKSL Units)
	10th December 2014:
		- Changelog removed from unit
	9th December 2014 (Another Update):
		- Replaced more Dynamic Arrays with TLKList<T>
			- TLKEventTransmitterArray becomes TLKEventTransmitterList
			- TLKEventRecorderArray becvomes TLKEventRecorderList
		- Implemented TLKEventEngine.UnregisterRecorder, which was previously unimplemented (whoops)
	9th December 2014:
		- Begun replacing Dynamic Arrays with TLKList<T>
			- TLKEventArray is now TLKEventList
			- TLKEventListenerArray is now TLKEventListenerList
			- TLKEventTypeArray is now TLKEventTypeList
			- TLKEventThreadArray is now TLKEventThreadList
		- Introduced define LKSL_USE_LISTS (a temporary switch between Lists and Arrays)
		- Define LKSL_NO_LISTS in your project if you wish to go back to Arrays
			- Be warned: the Arrays are now considered "Deprecated" and the intent is to remove them once a more "robust"
			  replacement for the standard TList<T> type has been completed (with thread-safe locks integrated internally).
	8th December 2014:
		- Removed "RemoveEventFromStream" from TLKEvent as it is no longer required
	2nd December 2014:
		- Added write-support to TLKEvent.IsReplay.
			- Should only really be used by Event Recorders/Replayers to inform the Event Engine not to re-record the Event
			- The "IsReplay" value can also be introspected by your Listeners, so that they can behave in a different way if
			they are required to do so.
	1st December 2014:
		- Fixed issue where ALL events would be Recorded (regardless of their "AllowRecording" setting.
		- Fixed some other silly little bugs.
	30th November 2014:
		- Generics are now mandatory (support for non-Generics versions of Delphi is not being considered)
		- "TDictionary" references replaced by "TLKDictionary" (which integrates the thread-safe Lock)
		- Support for non-namespaced units added
		- Introduced the "Event Recorder" system
		- Events can be set to allow or disallow recording
		- Events that allow recording will be recorded regardless of whether or not there are
		  any "Listeners" registered for that Event Type.
		- Event Recordings can be replayed either in the same application, or in any application you want
		  so long as that application has all of the same Event Types registered.
		- TLKEvent.GetDefaultStreamEvent changed to "GetDefaultAllowTransmit"
		- TLKEvent.StreamEvent changed to "AllowTransmit"
		- TLKEvent additions:
			- (Protected) "GetDefaultAllowRecording" (Default = True)
			- Override if you want your Event Type to NOT be Recordable by default
		- (Public, Property) "AllowRecording"
			- True = Allow the Event to be Recorded
			- False = Do NOT allow the Event to be Recorded.
		- (Public, Property) "IsReplay" [Read-only]
			- True = The Event Instance is part of a Replay
			- False = The Event Instance is NOT part of a Replay
	28th November 2014 (2nd update):
        	- Reverted some of the "for in" loops because of performance implications!
	28th November 2014:
		- Added integration for Generic Containers (TDictionary) for Event Listener Groups
		  in TLKEventThreadBase
		- Made some trivial syntactic changes to certain "for" loops because it looks cleaner.
	27th November 2014:
		- A known "ISSUE" remains in TLKEventThreadBase.ProcessListeners
		- Locking the Event Listener Groups at the point of a call represents a significant risk
		  where the Event Call may attempt to register or unregister a Listener.
		  This would cause a deadlock, because the Queue/Stack thread would hold the Lock, but
		  the executing thread would try to demand it. This means the Queue/Stack thread won't
		  be able to release its Lock (as the Event Call can't return until AFTER the Event Call returns).
		  I'M OPEN TO SUGGESTIONS ON WAYS AROUND THIS ISSUE!
		  You won't have any issues so long as you aren't Subscribing/Unsubscribing Event Listeners
		  within an Event Call!
		- Wrapped all LOCKS with "Try/Finally" blocks to ensure that the lock is released if there's
		  a failure (for whatever reason)
		- Updated TLKEvent to match changes made in TLKStreamable
			- (Public) "DeleteFromStream" is now (Protected) "RemoveEventFromStream"
			- (Public) "ReadFromStream" is now (Protected) "ReadEventFromStream"
			- (Public) "InsertIntoStream" is now (Protected) "InsertEventIntoStream"
			- (Public) "WriteToStream" is now (Protected) "WriteEventToStream"
			> This causes Compiler Warnings if you forget to implement these methods in your Event classes!
		- Added "GetDispatchMode" to TLKEvent... you can now set an Event to allow dispatch through:
			- The Queue OR the Stack
			- The Queue ONLY
			- The Stack ONLY
			> Default = Queue OR Stack
			> If you attempt to dispatch through a restricted handler, it simply refers the Event to the correct
			  handler automatically. Once the "Event Debugger" is done, a warning will be introduced for these
			  occurences.
		- "TLKPriority" became "TLKDispatchMethod"
			- "Priority" doesn't accurately describe what the value represents
			- Plans are afoot to introduce a "Priority" system to the Event Engine shortly, so this had to be
			  changed to something more appropriate to avoid confusion down the line.
		- "TLKEventHandler" has become "LKEventEngine" and is no longer a public global (it doesn't need to be)
		- Deprecated global methods "QueueEvent" and "StackEvent" has been removed
			> Call "MyEvent.Queue" and "MyEvent.Stack" respectively to dispatch an Event
	26th November 2014:
		- Added overloaded Constructors to the GENERIC version of TLKEventListener.
		  You can now pass an Event Callback as a parameter of the Constructor to streamline the
		  initialization of the Listener (one line instead of 2)
	18th November 2014:
		- Added a GENERIC version of TLKEventListener contributed by Uwe Raab
		  see http://www.uweraabe.de/Blog/2014/11/09/a-generic-tlkeventlistener-for-lksl/
		  This eliminates the replication of boilerplate code for easier implementation.
		- Deprecated "QueueEvent" and "StackEvent" procedures. Will be removed after 1st December 2014
		- Added LKSL.INC include for configuration settings and version-specific configurations
	13th October 2014:
		- Added Enum "TLKEventProcessMode"
		- Added Property "ProcessMode" to TLKEventThreadBase to switch between full queue processing and
		  one 'Single Event per Cycle' processing.
		- Set TLKEventThread to use the new full queue processing mode by default
		  (set "ProcessMode := epmOneByOne;" against your Event Thread if you want the old processing
		  mode instead of the new (more efficient) one.
	21st September 2014:
		- Immuted the "Tick" Procedure in TLKEventThread, as you may not wish to have a looped process
		  taking place in an Event Thread (given that the Thread is Event-Driven).
	15th September 2014:
		- Removed unnecessary Callback Types (they weren't used anywhere).
		- Fixed several bugs (including one critical bug)
	9th Steptember 2014:
		- Removed a piece of fault-finding code I had forgotten about
		- Added Method "GetDefaultExpiresAfter" to "TLKEvent" so you can specify a default Expiry Time
		  on your Event Types (where desired). It defaults to 0.00, so if you DON'T want the Event to
		  expire, you don't need to override that function.
		- Added Method "GetDefaultStreamEvent" to "LKEvent" so you can specify whether or not that Event
		  should be passed over to the Event Streaming system for transmission to other processes.
		- Added property "StreamEvent" to "TLKEvent". When "True", that Event will be passed to the
		  Event Streaming system for transmission to other processes.
		- Added a Transmitter and Receiver system for Streaming Events to other processes. Cool, huh?
	8th September 2014:
		- Fixed a bug in "TLKEvent.Clone" method (Missing instruction to Lock the Original Event)
	6th September 2014:
		- Changed "TLKEvent" ancestor for "TLKPersistent" to "TLKStreamable"
		- Added interface Uses reference to "LKSL.Streamables.Base"
		- Added implementation Uses reference to "LKSL.Streams.System.pas"
	5th September 2014 (small change commit):
		- Changed "GetEventTypeGUID" to "GetTypeGUID" in TLKEvent. This is because its Parent Type
		  needs to be changed to "TLKStreamable" once the new and improved Streamables Engine is
		  released publicly.
	5th September 2014:
		- Prepared for Release

LKSL.Events.RecorderFile.pas
----------------------------
	15th December 2014:
		- Added RTTI Suppression (define LKSL_NO_RTTI in your project to disable RTTI for LKSL Units)
	10th December 2014:
		- Changelog removed from unit
	8th December 2014:
		- Fixed some issues with Event Replay
		- Added a compiler warning to let developers know that this unit is not year ready for real-world
		  use. Will of course remove the warning once the unit has reached an acceptable point of readiness.
	2nd December 2014:
		- Added code to support replaying of entire Sessions (on a session-by-session basis)
	1st December 2014:
		- Prepared for Release

LKSL.Events.Streams.pas
-----------------------
	15th December 2014:
		- Added RTTI Suppression (define LKSL_NO_RTTI in your project to disable RTTI for LKSL Units)
	10th December 2014:
		- Changelog removed from unit
	8th December 2014:
		- Fixed a problem storing Enums in a Stream (inconsistencies in Enum size etc)
	27th November 2014:
		- "TLKPriority" became "TLKDispatchMethod" (see LKSL.Events.Base.pas changelog for details)
	6th September 2014:
		- Prepared for Release

LKSL.Generics.Collections.pas
-----------------------------
	22nd December 2014:
		- Added TLKListBase<T> (ABSTRACT class)
			- Contains common members and functionality for Generic Lists (NOT including TLKCenteredList<T>, which works very differently)
		- Added TLKList<T>
			- The simplest (and most light-weight) implementation of TLKListBase<T>
		- Added TLKObjectList<T>
			- A version of TLKList<T> with support of Object Ownership (releases Objects automatically if owned)
		- Added TLKSortedListBase<T>
			- Abstract Base Type for all Sorted Lists (provides Parity Check and Sorted Position Lookups)
		- Added TLKSortedList<T>
			- A version of TLKSortedListBase<T> which doesn't care about duplicate Sorted Indexes
		- Added TLKSortedObjectList<T>
			- A version of TLKSortedList<T> with support of Object Ownership (releases Objects automatically if owned)
		- Begun work on TLKSortedListUnique<T, TKey> (INCOMPLETE, COMMENTED OUT)
	16th December 2014:
		- Several bug fixes
		- Made TLKCenteredList<T>.Delete[Center/Left/Right] Virtual methods and moved them into the Protected area
		- Added TLKCenteredList<T>.ValidateDelete[Center/Left/Right] methods, which are called before
		  Delete[Center/Left/Right]
		- Added TLKCenteredObjectList<T: class>, which has the ability to OWN its items (meaning they are destroyed
		  with the list)
		- Added TLKTreeObjectNode<T: class>, which has teh ability to OWN its Value (meaning it is destroyed with the
		  node)
	16th December 2014:
		- Fixed off-by-one in TLKCenteredList.GetHigh.
	15th December 2014:
		- Added RTTI Suppression (define LKSL_NO_RTTI in your project to disable RTTI for LKSL Units)
	15th December 2014:
		- Added TLKTreeNode
	14th December 2014:
		- Added TLKCenteredList<T>.Swap
	14th December 2014:
		- Added Range Checking to TLKCenteredList<T>'s "Insert" methods
	14th December 2014:
		- Further improved performance of TLKCenteredList<T> by making it use System.Move() instead of iteration
		- Added "Insert" methods
		- Overloaded "AddLeft" and "AddRight" functions with procedures to add an Array of T accordingly.
	11th December 2014 (2nd commit):
		- Added Setters to TLKCenteredList<T>.Items
	11th December 2014:
		- Added TLKCenteredList<T>
			- A magic (and efficient) managed List capable of taking both Negative and Positive indices.
			- You can basically Queue AND Stack items within the Array (Queue with Positive index, Stack with
			  a Negative index).
	10th December 2014:
		- Changelog removed from unit
	30th November 2014:
		- Prepared for Release

LKSL.Streamables.pas
--------------------
	15th December 2014:
		- Added RTTI Suppression (define LKSL_NO_RTTI in your project to disable RTTI for LKSL Units)
	10th December 2014:
		- Changelog removed from unit
	8th December 2014:
		- Removed "RemoveFromStream" from TLKStreamable. This is no longer required as we now store the size
		  of each Streamable block within a Stream. This means we can remove the entire block without having to
		  iterate through each constituent there-of.
		- Removed unnecessary Lock/Unlock instructions from the Read/Insert/Write methods of TLKStreamableNamed.
	2nd December 2014:
		- TLKStreamable types now include a single Byte for the current version of the Event Engine itself.
		  This is so that no further changes to the TLKStreamable type will invalidate existing stored serializations
		  of TLKStreamable objects.
		- Fixed a bug in TLKStreamable.CreateFromStream (was calling "ReadFromStream" when the correct entry-point is
		  "LoadFromStream"
		- Fixed a bug in TLKStreamables.StreamableTypeMatch so that it now returns TRUE when the determined Type is
		  a descendant of the nominated Type.
		- Added TLKStreamable.CheckTypeInStream
			- Class function, returns True if the signature at the current (or nominated) Position of the Stream
			  matches the current Type (or a descendant of the current Type)
	1st December 2014:
		- Fixed a bug in TLKStreamable.DeleteFromStream (forgot to change the Signature from a String to a TGUID)
		- Added "BlockSize" data to TLKStreamable so you can skip over entire Streamable Items within a Stream.
	30th November 2014:
		- Put "try/finally" blocks around all Lock requests (so if the code fails, the Lock will be released)
	28th November 2014 (second commit):
		- Reverted some of the "for in" loops due to performance implications
	28th November 2014:
		- Added integration for Generic Containers (TDictionary) for Streamable Types in TLKStreamables.
		- Made some trivial syntactic changes to certain "for" loops because it looks cleaner.
	27th November 2014:
		- Added Class Procedure "Register" to TLKStreamable
			- It's basically an alias of "Streamables.Register(Self);"
		- Added Constructor "CreateFromStream" to TLKStreamable
			- Takes a TStream reference, and initialzies the object using the serialization in the Stream
		- Added Constructor "CreateFromFile" to TLKStreamable
			- Takes a Filename and initializes the object using the serialization in that File
		- Added function "CreateStreamableFromStream" Params: (AStream: TStream; APosition: Int64 [optional])
			- Returns a new instance of the appropriate Streamable Type populated from the Stream
			- Returns a "nil" if the signature does not match a registered Streamable Type
		- TLKStreamable significant INTERFACE-BREAKING changes:
			> For the sake of implementation overrides:
				- (Public) "DeleteFromStream" became (Protected) "RemoveFromStream"
				- (Public) "ReadFromStream" became (Protected) "ReadFromStream"
				- (Public) "InsertIntoStream" became (Protected) "InsertIntoStream"
				- (Public) "WriteToStream" became (Protected) "WriteToStream"
			> For the sake of external calls to TLKStreamable descendents:
				- "DeleteFromStream" remains the same (only the implementation has been relocated)
				- "LoadFromStream" replaces "ReadFromStream" for external reference
				- "SaveToStream" replaces "WriteToStream" and "InsertIntoSTream" for external reference
				- TLKStreamable.GetTypeGUID now MUST return an actual TGUID (not a String anymore!)
	6th September 2014:
		- Prepared for Release

LKSL.Streams.System.pas
-----------------------
	15th December 2014:
		- Added RTTI Suppression (define LKSL_NO_RTTI in your project to disable RTTI for LKSL Units)
	10th December 2014:
		- Changelog removed from unit
	2nd December 2014:
		- Removed the IFDEF check for GENERICS (as GENERICS is now always-on in the LKSL)
	26th October 2014:
		- Added explicit "Cardinal" support (Delete, Insert, Read, Write)
		- Added "StreamManager" class
			- Delete = StreamManager.Delete<Integer>(MyStream);
			- Insert = StreamManager.Insert<Integer>(MyStream, MyInteger);
			- Read = MyInteger := StreamManager<Integer>(MyStream);
			- Write = StreamManager.Write<Integer>(MyStream, MyInteger);
		- Added GENERIC HELPER "TLKStreamHelper" for TStream
			- Delete = MyStream.DeleteValue<Integer>;
			- Insert = MyStream.InsertValue<Integer>(MyInteger);
			- Read = MyInteger := MyStream.ReadValue<Integer>;
			- Write = MyStream.WriteValue<Integer>(MyInteger);
	6th September 2014 (bug fix commit):
		- Fixed a silly bug in every "Insert" method
	6th September 2014:
		- Prepared for Release

LKSL.Streams.Types.pas
----------------------
	15th December 2014:
		- Added RTTI Suppression (define LKSL_NO_RTTI in your project to disable RTTI for LKSL Units)
	10th December 2014:
		- Changelog removed from unit
	6th September 2014 (bug fix commit):
		- Fixed a silly bug in every "Insert" method
	6th September 2014:
		- Prepared for Release

LKSL.Threads.Base.pas
---------------------
	15th December 2014:
		- Added RTTI Suppression (define LKSL_NO_RTTI in your project to disable RTTI for LKSL Units)
	10th December 2014:
		- Changelog removed from unit
	30th November 2014:
		- Put "try/finally" blocks around all Lock requests (so if the code fails, the Lock will be released)
	19th September 2014:
		- Added Protected Function "CalculateExtraTime" which returns the number of seconds
		  (double-precision) available between the time at which you place the call, and the time at which
		  the next Tick is scheduled to occur.
	16th September 2014:
		- Added Property "TickRateDesired" which is used to define the rate you want the Thread to run at.
		  This is NOT the same as "TickRateLimit"... it is used to calculate how much EXTRA time is
		  available over the "desired rate" (or how far BELOW the "Desired Rate", in the event of negative
		  values). The value should represent Ticks Per Second!
		- Added Property "TickRateExtraTicks" which (if "TickRateDesired > 0.00") returns the INSTANT number of
		  Ticks Per Second in EXCESS of the Desired Rate.
		- Added Property "TickRateExtraTicksAverage" which (if "TickRateDesired > 0.00") returns the AVERAGE
		  number of Ticks Per Second in EXCESS of the Desired Rate.
		- Added Property "TickRateExtraTime" which returns the number of SECONDS between the INSTANT Tick
		  Rate and the DESIRED Tick Rate
		- Added Property "TickRateExtraTimeAverage" which is the same as "TickRateExtraTime" but Averaged
	8th September 2014:
		- Fixed a bug related to non-Windows platforms
	4th September 2014 (Second Commit):
		- Decenteralized "GetReferenceTime" so that all Threads share a common Reference Timer.
		  This is good for synchronizing process timing between separate Threads.
		- Added new Method "PreTick", which is executed on EVERY cycle, ignoring the Tick Rate Limit.
		  This is required for the "TLKEventThread" type defined in "LKSL.Events.Base.pas"
	4th September 2014 (First Commit):
		- Added new Method "GetDefaultYieldAccumulatedTime" to define whether all accumulated (excess) time
		  should be yielded in a single block by default.
		- Added new Property "YieldAccumulatedTime" to control ad-hoc whether all accumulated (excess) time
		  should be yielded in a single block.
		- Add new Property "NextTickTime", which is the Reference Time at (or after) which the next Tick
		  will occur.
		- Added new Method "Bump", which (if "YieldAccumulatedTime" = False) forces the next Tick to occur
		  immediately.
	3rd September 2014:
		- Prepared for Release.